name: tests

on: [push]

jobs:

  build:
    name: ${{ matrix.os }} python ${{ matrix.python-version }}

    runs-on: ${{ matrix.os }}

    if: >-
        !contains(github.event.head_commit.message, '[skip ci]')
        && !contains(github.event.head_commit.message, '[skip tests]')

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.9', '3.12']

    steps:
      - name: Skip replicates on main branch
        env:
          skip_replicates: ${{ github.ref == 'refs/heads/main' && (matrix.os != 'ubuntu-latest' || matrix.python-version != '3.11') }}
        shell: bash
        run: |
          echo "skipping_build_and_test_replicate=${skip_replicates}" >> $GITHUB_ENV

      - name: Check out code
        if: ${{ env.skipping_build_and_test_replicate != 'true' }}
        uses: actions/checkout@v4

      - name: Install uv and set the python version
        if: ${{ env.skipping_build_and_test_replicate != 'true' }}
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install hatch and run tests
        if: ${{ env.skipping_build_and_test_replicate != 'true' }}
        shell: bash
        run: |
          uv pip install hatch
          hatch run test -s --cov=spherical_functions --cov-branch --cov-report=xml --durations=0

      - name: Upload coverage
        if: "matrix.python-version == '3.12' && matrix.os == 'ubuntu-latest'"
        uses: codecov/codecov-action@v5


  release:
    name: Create release and send to PyPI
    needs: build
    runs-on: ubuntu-latest
    if: >-
        github.ref == 'refs/heads/main'
        && !contains(github.event.head_commit.message, '[no release]')
        && (success() || contains(github.event.head_commit.message, '[skip tests]'))

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Install uv
        if: ${{ env.skipping_build_and_test_replicate != 'true' }}
        uses: astral-sh/setup-uv@v5
        with:
          python-version: "3.12"

      - name: Install hatch
        if: ${{ env.skipping_build_and_test_replicate != 'true' }}
        shell: bash
        run: |
          uv pip install hatch

      - name: Determine bump type
        id: version
        run: |
          OLD_VERSION="$(hatch version)"
          BUMP_TYPE="patch"
          if [[ "$OLD_VERSION" == *"a"* ]]; then
            BUMP_TYPE="a"
          elif [[ "$OLD_VERSION" == *"b"* ]]; then
            BUMP_TYPE="b"
          fi
          COMMIT_MSG="$(git log -1 --pretty=%B)"
          if [[ "$COMMIT_MSG" == *"#major"* ]]; then
            BUMP_TYPE="major"
          elif [[ "$COMMIT_MSG" == *"#minor"* ]]; then
            BUMP_TYPE="minor"
          elif [[ "$COMMIT_MSG" == *"#patch"* ]]; then
            BUMP_TYPE="patch"
          elif [[ "$COMMIT_MSG" == *"#alpha"* ]]; then
            BUMP_TYPE="a"
          elif [[ "$COMMIT_MSG" == *"#beta"* ]]; then
            BUMP_TYPE="b"
          elif [[ "$COMMIT_MSG" == *"#release"* ]]; then
            BUMP_TYPE="release"
          fi
          echo "BUMP_TYPE=$BUMP_TYPE" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump_version
        run: |
          export NO_COLOR=1  # To turn off formatting in `hatch version`
          hatch version ${{ steps.version.outputs.BUMP_TYPE }}
          NEW_VERSION="$(hatch version | tr -d '\n')"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=${NEW_VERSION}" >> $GITHUB_ENV
          prerelease="false"
          if [[ "$NEW_VERSION" == *"a"* ]]; then
            prerelease="true"
          elif [[ "$NEW_VERSION" == *"b"* ]]; then
            prerelease="true"
          fi
          echo "prerelease=${prerelease}" >> $GITHUB_ENV

      - name: Determine if release steps should run
        id: release_check
        run: |
          # Default to skipping release steps
          echo "run_release=false" >> $GITHUB_OUTPUT

          # If the ref is main, check the commit message for [skip release]
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            COMMIT_MSG="$(git log -1 --pretty=%B)"
            if [[ "$COMMIT_MSG" != *"[skip release]"* ]]; then
              echo "run_release=true" >> $GITHUB_OUTPUT
              echo "run_release=true"
            fi
          fi

      - name: Commit version bump
        if: ${{ steps.release_check.outputs.run_release == 'true' }}
        run: |
          # Note that we need to set read and write permissions under
          # "Settings" > "Actions" > "General" > "Workflow permissions"
          git config user.name github-actions
          git config user.email github-actions@github.com
          git status
          git add spherical_functions/__init__.py
          git commit -m "Bump version to v${new_version}"
          git tag -a "v${new_version}" -m "Version ${new_version}"
          git status
          git push --follow-tags  # Will not trigger new workflow because it uses GITHUB_TOKEN

      - name: Create GitHub Release
        if: ${{ steps.release_check.outputs.run_release == 'true' }}
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.new_version }}
          name: Release v${{ env.new_version }}
          draft: false
          prerelease: ${{ env.prerelease }}

      - name: Publish to PyPI
        if: ${{ steps.release_check.outputs.run_release == 'true' }}
        env:
          # 1) Get key from https://pypi.org/manage/account/token/
          # 2) Copy it to Github > repo > Settings > Secrets and variables
          #    > Actions > New repository secret
          HATCH_INDEX_USER: __token__
          HATCH_INDEX_AUTH: ${{ secrets.PYPI_TOKEN }}
        shell: bash
        run: |
          hatch build
          hatch publish
  